package architecture

import (
	"github.com/Rhaqim/garch-go/internal/app/core"
)

const README_FILE = "README.md"
const README_CONTENT = `
# Hexagonal Architecture Boilerplate

## Introduction

This is a boilerplate generated by Garch for a hexagonal architecture in Go.

## Getting Started

To get started, run the following command:

"""bash
go run main.go
"""

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- [Garch](https://github.com/Rhaqim/garch)
- [Hexagonal Architecture](https://en.wikipedia.org/wiki/Hexagonal_architecture_(software))
- [Go](https://golang.org/)
- [Rust](https://www.rust-lang.org/)
`

// License
const LICENSE_FILE = "LICENSE"
const LICENSE_CONTENT = "MIT License"

// Gitignore
const GITIGNORE_FILE = ".gitignore"
const GITIGNORE_CONTENT = `
# Binaries for programs and plugins
bin
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with "go test -c"
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work
go.work.sum

# Environment variables
*.env

# bundle
bundle

# ds store osx
.DS_Store
`

// Main File
const MAIN_FILE = "main.go"
const MAIN_CONTENT = `package main

import "fmt"

func main() {
    fmt.Println("Welcome to Garch!")
}
`

var RootFiles = []core.FileStructure{
	{
		FileName: README_FILE,
		Content:  README_CONTENT,
	},
	{
		FileName: LICENSE_FILE,
		Content:  LICENSE_CONTENT,
	},
	{
		FileName: GITIGNORE_FILE,
		Content:  GITIGNORE_CONTENT,
	},
	{
		FileName: MAIN_FILE,
		Content:  MAIN_CONTENT,
	},
}
