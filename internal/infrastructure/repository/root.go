package repository

import (
	"github.com/Rhaqim/garch-go/internal/app/domain"
)

const README_FILE = "README.md"
const README_CONTENT = `# Hexagonal Architecture Boilerplate

## Introduction

This is a boilerplate generated by Garch for a hexagonal architecture in Go.

## Getting Started

To get started, run the following command:

"""bash
go run main.go
"""

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- [Garch](https://github.com/Rhaqim/garch-go)
- [Hexagonal Architecture](https://en.wikipedia.org/wiki/Hexagonal_architecture_(software))
- [Go](https://golang.org/)
`

// License
const LICENSE_FILE = "LICENSE"
const LICENSE_CONTENT = "MIT License"

// Gitignore
const GITIGNORE_FILE = ".gitignore"
const GITIGNORE_CONTENT = `
# Binaries for programs and plugins
bin
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with "go test -c"
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work
go.work.sum

# Environment variables
*.env

# bundle
bundle

# ds store osx
.DS_Store
`

// Main File
const MAIN_FILE = "main.go"
const MAIN_CONTENT = `package main

import "fmt"

func main() {
    fmt.Println("Welcome to Garch!")
}
`

var MainFile = domain.FileStructure{
	FileName:    MAIN_FILE,
	FileContent: MAIN_CONTENT,
}

var RootFiles = []domain.FileStructure{
	{
		FileName:    README_FILE,
		FileContent: README_CONTENT,
	},
	{
		FileName:    LICENSE_FILE,
		FileContent: LICENSE_CONTENT,
	},
	{
		FileName:    GITIGNORE_FILE,
		FileContent: GITIGNORE_CONTENT,
	},
}

// App Folder
const APP_FOLDER = "app"

// App Folders: entity, repository, service, usecase
const ENTITY_FOLDER = "entity"
const REPOSITORY_FOLDER = "repository"
const SERVICE_FOLDER = "service"
const USECASE_FOLDER = "usecase"

// App Files
// Entity Files
const ENTITY_FILE = "entity.go"

// Repository Files
const REPOSITORY_FILE = "repository.go"

// Service Files
const SERVICE_FILE = "service.go"

// Usecase Files
const USECASE_FILE = "usecase.go"

var AppFolders = []domain.FolderStructure{
	{
		FolderTitle: ENTITY_FOLDER,
		Files: []domain.FileStructure{
			{
				FileName:    ENTITY_FILE,
				FileContent: `package entity`,
			},
		},
	},
	{
		FolderTitle: REPOSITORY_FOLDER,
		Files: []domain.FileStructure{
			{
				FileName:    REPOSITORY_FILE,
				FileContent: `package repository`,
			},
		},
	},
	{
		FolderTitle: SERVICE_FOLDER,
		Files: []domain.FileStructure{
			{
				FileName:    SERVICE_FILE,
				FileContent: `package service`,
			},
		},
	},
	{
		FolderTitle: USECASE_FOLDER,
		Files: []domain.FileStructure{
			{
				FileName:    USECASE_FILE,
				FileContent: `package usecase`,
			},
		},
	},
}

// Infrastructure Folder
const INFRASTRUCTURE_FOLDER = "infrastructure"

// Infrastructure Folders: persistence, external
const PERSISTENCE_FOLDER = "persistence"
const EXTERNAL_FOLDER = "external"

// Infrastructure Files
// Persistence Folder
// Folders: repository
const PERSISTENCE_REPOSITORY_FOLDER = "repository"

// Repository Files
const PERSISTENCE_REPOSITORY_FILE = "repository.go"

// External Folder
// Folders: api, database
const EXTERNAL_API_FOLDER = "api"
const EXTERNAL_DATABASE_FOLDER = "database"

// API Files
const EXTERNAL_API_FILE = "api.go"

// Database Files
const EXTERNAL_DATABASE_FILE = "database.go"

var InfrastructureFolders = []domain.FolderStructure{
	{
		FolderTitle: PERSISTENCE_FOLDER,
		SubFolders: []domain.FolderStructure{
			{
				FolderTitle: PERSISTENCE_REPOSITORY_FOLDER,
				Files: []domain.FileStructure{
					{
						FileName:    PERSISTENCE_REPOSITORY_FILE,
						FileContent: `package repository`,
					},
				},
			},
		},
	},
	{
		FolderTitle: EXTERNAL_FOLDER,
		SubFolders: []domain.FolderStructure{
			{
				FolderTitle: EXTERNAL_API_FOLDER,
				Files: []domain.FileStructure{
					{
						FileName:    EXTERNAL_API_FILE,
						FileContent: `package api`,
					},
				},
			},
			{
				FolderTitle: EXTERNAL_DATABASE_FOLDER,
				Files: []domain.FileStructure{
					{
						FileName:    EXTERNAL_DATABASE_FILE,
						FileContent: `package database`,
					},
				},
			},
		},
	},
}

// Interface Folder
const INTERFACE_FOLDER = "interface"

// Interface Folders: delivery, persistence
const DELIVERY_FOLDER = "delivery"

// Delivery Files
// Folders: handler, presenter
const DELIVERY_HANDLER_FOLDER = "handler"
const DELIVERY_PRESENTER_FOLDER = "presenter"

// Handler Files
const DELIVERY_HANDLER_FILE = "handler.go"

// Presenter Files
const DELIVERY_PRESENTER_FILE = "presenter.go"

// Presenter Files
const PERSISTENCE_FILE = "persistence.go"

var InterfaceFolders = []domain.FolderStructure{
	{
		FolderTitle: DELIVERY_FOLDER,
		SubFolders: []domain.FolderStructure{
			{
				FolderTitle: DELIVERY_HANDLER_FOLDER,
				Files: []domain.FileStructure{
					{
						FileName:    DELIVERY_HANDLER_FILE,
						FileContent: `package handler`,
					},
				},
			},
			{
				FolderTitle: DELIVERY_PRESENTER_FOLDER,
				Files: []domain.FileStructure{
					{
						FileName:    DELIVERY_PRESENTER_FILE,
						FileContent: `package presenter`,
					},
				},
			},
		},
	},
	{
		FolderTitle: PERSISTENCE_FOLDER,
		Files: []domain.FileStructure{
			{
				FileName:    PERSISTENCE_FILE,
				FileContent: `package persistence`,
			},
		},
	},
}
